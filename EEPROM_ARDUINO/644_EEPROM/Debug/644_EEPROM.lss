
644_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000994  00000a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080018e  0080018e  00000ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b2d  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018e7  00000000  00000000  00008905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018ef  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000083c  00000000  00000000  0000badc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002097  00000000  00000000  0000c318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d96  00000000  00000000  0000e3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00011145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_18>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_20>
  54:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_21>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
  7c:	24 03       	mulsu	r18, r20

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d0 e1       	ldi	r29, 0x10	; 16
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	e4 e9       	ldi	r30, 0x94	; 148
  92:	f9 e0       	ldi	r31, 0x09	; 9
  94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	ae 38       	cpi	r26, 0x8E	; 142
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	ae e8       	ldi	r26, 0x8E	; 142
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 33       	cpi	r26, 0x34	; 52
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	cf e3       	ldi	r28, 0x3F	; 63
  b4:	d0 e0       	ldi	r29, 0x00	; 0
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
  b8:	21 97       	sbiw	r28, 0x01	; 1
  ba:	fe 01       	movw	r30, r28
  bc:	0e 94 c2 04 	call	0x984	; 0x984 <__tablejump2__>
  c0:	ce 33       	cpi	r28, 0x3E	; 62
  c2:	d1 07       	cpc	r29, r17
  c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
  c6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <main>
  ca:	0c 94 c8 04 	jmp	0x990	; 0x990 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_Z11readMEMinitv>:
	writeMEMend();
	uint16_t temp;
	temp=readMEMbyte(0)<<8;
	temp|=readMEMbyte(1);
	return temp;	
}
  d2:	5e 98       	cbi	0x0b, 6	; 11
  d4:	5d 98       	cbi	0x0b, 5	; 11
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	11 b8       	out	0x01, r1	; 1
  da:	12 b8       	out	0x02, r1	; 2
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z11readMEMinitv+0xc>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <_Z7readMEMj>:
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	98 b9       	out	0x08, r25	; 8
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <_Z7readMEMj+0x6>
  f0:	00 00       	nop
  f2:	80 b1       	in	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <_Z10readMEMendv>:
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 66       	ori	r24, 0x60	; 96
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret

000000fe <_Z11readMEMbytej>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
 104:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11readMEMinitv>
 108:	ce 01       	movw	r24, r28
 10a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z7readMEMj>
 10e:	c8 2f       	mov	r28, r24
 110:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z10readMEMendv>
 114:	8c 2f       	mov	r24, r28
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <_Z12writeMEMinitv>:
 11c:	5d 98       	cbi	0x0b, 5	; 11
 11e:	5e 9a       	sbi	0x0b, 6	; 11
 120:	5f 9a       	sbi	0x0b, 7	; 11
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <_Z12writeMEMinitv+0x8>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <_Z8writeMEMjh>:
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	98 b9       	out	0x08, r25	; 8
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <_Z8writeMEMjh+0x6>
 136:	5f 98       	cbi	0x0b, 7	; 11
 138:	62 b9       	out	0x02, r22	; 2
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 b9       	out	0x01, r24	; 1
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <_Z8writeMEMjh+0x14>
 144:	00 00       	nop
 146:	5f 9a       	sbi	0x0b, 7	; 11
 148:	08 95       	ret

0000014a <_Z11writeMEMendv>:
 14a:	5e 9a       	sbi	0x0b, 6	; 11
 14c:	5d 9a       	sbi	0x0b, 5	; 11
 14e:	5f 9a       	sbi	0x0b, 7	; 11
 150:	11 b8       	out	0x01, r1	; 1
 152:	12 b8       	out	0x02, r1	; 2
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <_Z11writeMEMendv+0xc>
 15a:	08 95       	ret

0000015c <_Z12writeMEMbytejh>:
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	16 2f       	mov	r17, r22
 166:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z12writeMEMinitv>
 16a:	61 2f       	mov	r22, r17
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 172:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z11writeMEMendv>
 176:	85 e8       	ldi	r24, 0x85	; 133
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <_Z12writeMEMbytejh+0x1c>
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <_Z23disableEEPROMprotectionv>:
 186:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z12writeMEMinitv>
 18a:	6a ea       	ldi	r22, 0xAA	; 170
 18c:	85 e5       	ldi	r24, 0x55	; 85
 18e:	95 e5       	ldi	r25, 0x55	; 85
 190:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 194:	65 e5       	ldi	r22, 0x55	; 85
 196:	8a ea       	ldi	r24, 0xAA	; 170
 198:	9a e2       	ldi	r25, 0x2A	; 42
 19a:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 19e:	60 e8       	ldi	r22, 0x80	; 128
 1a0:	85 e5       	ldi	r24, 0x55	; 85
 1a2:	95 e5       	ldi	r25, 0x55	; 85
 1a4:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 1a8:	6a ea       	ldi	r22, 0xAA	; 170
 1aa:	85 e5       	ldi	r24, 0x55	; 85
 1ac:	95 e5       	ldi	r25, 0x55	; 85
 1ae:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 1b2:	65 e5       	ldi	r22, 0x55	; 85
 1b4:	8a ea       	ldi	r24, 0xAA	; 170
 1b6:	9a e2       	ldi	r25, 0x2A	; 42
 1b8:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 1bc:	60 e2       	ldi	r22, 0x20	; 32
 1be:	85 e5       	ldi	r24, 0x55	; 85
 1c0:	95 e5       	ldi	r25, 0x55	; 85
 1c2:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8writeMEMjh>
 1c6:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_Z11writeMEMendv>

000001ca <setup>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
	DDRCTRL = (1<<WE)|(1<<CE)|(1<<OE);
 1ca:	80 ee       	ldi	r24, 0xE0	; 224
 1cc:	8a b9       	out	0x0a, r24	; 10
	PORTCTRL = (1<<WE)|(1<<CE)|(1<<OE);
 1ce:	8b b9       	out	0x0b, r24	; 11
	DDRDAT = 0x00; // DATA input
 1d0:	11 b8       	out	0x01, r1	; 1
	DDRADRL = 0xFF; // Address L out
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 b9       	out	0x04, r24	; 4
	DDRADRH = 0xFF; // Address H out
 1d6:	87 b9       	out	0x07, r24	; 7
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 1d8:	26 e0       	ldi	r18, 0x06	; 6
 1da:	40 e8       	ldi	r20, 0x80	; 128
 1dc:	55 e2       	ldi	r21, 0x25	; 37
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8e e8       	ldi	r24, 0x8E	; 142
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("/////////////////////////EEPROM/FLASH interface");
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	8e e8       	ldi	r24, 0x8E	; 142
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Print7printlnEPKc>
	PORTCTRL &= (1<<CE);
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	80 72       	andi	r24, 0x20	; 32
 1fa:	8b b9       	out	0x0b, r24	; 11

	//uncomment for AT28C256 only
	disableEEPROMprotection();
 1fc:	0c 94 c3 00 	jmp	0x186	; 0x186 <_Z23disableEEPROMprotectionv>

00000200 <loop>:
	
}

void loop() {
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29

	uint8_t temp;
	Serial.println("/////////////////////////////////");
 20a:	60 e3       	ldi	r22, 0x30	; 48
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	8e e8       	ldi	r24, 0x8E	; 142
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Print7printlnEPKc>
// 	uncomment for 39SF010 ID reading
// 	Serial.print("/////////////////////////////////_ID_ = ");
// 	Serial.println(readID(),HEX);
	for (uint16_t i=0; i<10; i++)
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	d0 e0       	ldi	r29, 0x00	; 0
	{
		temp=readMEMbyte(i);
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z11readMEMbytej>
 220:	18 2f       	mov	r17, r24
		Serial.print("0x");
 222:	67 e5       	ldi	r22, 0x57	; 87
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	8e e8       	ldi	r24, 0x8E	; 142
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		if(i<0x10){
			Serial.print("0");}
 22e:	62 e5       	ldi	r22, 0x52	; 82
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	8e e8       	ldi	r24, 0x8E	; 142
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		if(i<0x100){
			Serial.print("0");}
 23a:	62 e5       	ldi	r22, 0x52	; 82
 23c:	71 e0       	ldi	r23, 0x01	; 1
 23e:	8e e8       	ldi	r24, 0x8E	; 142
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		if(i<0x1000){
			Serial.print("0");}
 246:	62 e5       	ldi	r22, 0x52	; 82
 248:	71 e0       	ldi	r23, 0x01	; 1
 24a:	8e e8       	ldi	r24, 0x8E	; 142
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		Serial.print(i,HEX);
 252:	40 e1       	ldi	r20, 0x10	; 16
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	be 01       	movw	r22, r28
 258:	8e e8       	ldi	r24, 0x8E	; 142
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN5Print5printEji>
		Serial.print(" : 0x");
 260:	64 e5       	ldi	r22, 0x54	; 84
 262:	71 e0       	ldi	r23, 0x01	; 1
 264:	8e e8       	ldi	r24, 0x8E	; 142
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		if(temp<0x10)
 26c:	10 31       	cpi	r17, 0x10	; 16
 26e:	30 f4       	brcc	.+12     	; 0x27c <loop+0x7c>
		Serial.print("0");
 270:	62 e5       	ldi	r22, 0x52	; 82
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	8e e8       	ldi	r24, 0x8E	; 142
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN5Print5printEPKc>
		Serial.print(temp,HEX);
 27c:	40 e1       	ldi	r20, 0x10	; 16
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	61 2f       	mov	r22, r17
 282:	8e e8       	ldi	r24, 0x8E	; 142
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN5Print5printEhi>
		if(temp!=((i+1))){
 28a:	7e 01       	movw	r14, r28
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	e2 1a       	sub	r14, r18
 290:	f2 0a       	sbc	r15, r18
 292:	81 2f       	mov	r24, r17
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	8e 15       	cp	r24, r14
 298:	9f 05       	cpc	r25, r15
 29a:	39 f0       	breq	.+14     	; 0x2aa <loop+0xaa>
			writeMEMbyte(i,i+1);
 29c:	6e 2d       	mov	r22, r14
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z12writeMEMbytejh>
			Serial.println(" trying to write");
 2a4:	6a e5       	ldi	r22, 0x5A	; 90
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <loop+0xae>
		}
		else{
		Serial.println(" ");}
 2aa:	6b e6       	ldi	r22, 0x6B	; 107
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	8e e8       	ldi	r24, 0x8E	; 142
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Print7printlnEPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	99 e6       	ldi	r25, 0x69	; 105
 2ba:	28 e1       	ldi	r18, 0x18	; 24
 2bc:	81 50       	subi	r24, 0x01	; 1
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <loop+0xbc>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <loop+0xc6>
 2c6:	00 00       	nop
	uint8_t temp;
	Serial.println("/////////////////////////////////");
// 	uncomment for 39SF010 ID reading
// 	Serial.print("/////////////////////////////////_ID_ = ");
// 	Serial.println(readID(),HEX);
	for (uint16_t i=0; i<10; i++)
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	e8 16       	cp	r14, r24
 2cc:	f1 04       	cpc	r15, r1
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <loop+0xd4>
 2d0:	e7 01       	movw	r28, r14
 2d2:	a3 cf       	rjmp	.-186    	; 0x21a <loop+0x1a>
		}
		else{
		Serial.println(" ");}
		_delay_ms(500);
	}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	08 95       	ret

000002e0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2e0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2e2:	91 8d       	ldd	r25, Z+25	; 0x19
 2e4:	22 8d       	ldd	r18, Z+26	; 0x1a
 2e6:	89 2f       	mov	r24, r25
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	80 5c       	subi	r24, 0xC0	; 192
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	82 1b       	sub	r24, r18
 2f0:	91 09       	sbc	r25, r1
}
 2f2:	8f 73       	andi	r24, 0x3F	; 63
 2f4:	99 27       	eor	r25, r25
 2f6:	08 95       	ret

000002f8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2f8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2fa:	91 8d       	ldd	r25, Z+25	; 0x19
 2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
 2fe:	98 17       	cp	r25, r24
 300:	31 f0       	breq	.+12     	; 0x30e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 302:	82 8d       	ldd	r24, Z+26	; 0x1a
 304:	e8 0f       	add	r30, r24
 306:	f1 1d       	adc	r31, r1
 308:	85 8d       	ldd	r24, Z+29	; 0x1d
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 312:	08 95       	ret

00000314 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 314:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 316:	91 8d       	ldd	r25, Z+25	; 0x19
 318:	82 8d       	ldd	r24, Z+26	; 0x1a
 31a:	98 17       	cp	r25, r24
 31c:	61 f0       	breq	.+24     	; 0x336 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 31e:	82 8d       	ldd	r24, Z+26	; 0x1a
 320:	df 01       	movw	r26, r30
 322:	a8 0f       	add	r26, r24
 324:	b1 1d       	adc	r27, r1
 326:	5d 96       	adiw	r26, 0x1d	; 29
 328:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 32a:	92 8d       	ldd	r25, Z+26	; 0x1a
 32c:	9f 5f       	subi	r25, 0xFF	; 255
 32e:	9f 73       	andi	r25, 0x3F	; 63
 330:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 33a:	08 95       	ret

0000033c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 33c:	fc 01       	movw	r30, r24
 33e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 340:	44 8d       	ldd	r20, Z+28	; 0x1c
 342:	25 2f       	mov	r18, r21
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	84 2f       	mov	r24, r20
 348:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 34a:	82 1b       	sub	r24, r18
 34c:	93 0b       	sbc	r25, r19
 34e:	54 17       	cp	r21, r20
 350:	10 f0       	brcs	.+4      	; 0x356 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 352:	cf 96       	adiw	r24, 0x3f	; 63
 354:	08 95       	ret
  return tail - head - 1;
 356:	01 97       	sbiw	r24, 0x01	; 1
}
 358:	08 95       	ret

0000035a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 35a:	8a e1       	ldi	r24, 0x1A	; 26
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	89 2b       	or	r24, r25
 360:	41 f0       	breq	.+16     	; 0x372 <_Z14serialEventRunv+0x18>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	89 2b       	or	r24, r25
 368:	21 f0       	breq	.+8      	; 0x372 <_Z14serialEventRunv+0x18>
 36a:	0e 94 1a 03 	call	0x634	; 0x634 <_Z17Serial0_availablev>
 36e:	81 11       	cpse	r24, r1
 370:	0d c0       	rjmp	.+26     	; 0x38c <_Z14serialEventRunv+0x32>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	89 2b       	or	r24, r25
 378:	71 f0       	breq	.+28     	; 0x396 <_Z14serialEventRunv+0x3c>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	89 2b       	or	r24, r25
 380:	51 f0       	breq	.+20     	; 0x396 <_Z14serialEventRunv+0x3c>
 382:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 386:	81 11       	cpse	r24, r1
 388:	04 c0       	rjmp	.+8      	; 0x392 <_Z14serialEventRunv+0x38>
 38a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 38c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 390:	f0 cf       	rjmp	.-32     	; 0x372 <_Z14serialEventRunv+0x18>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 396:	08 95       	ret

00000398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 398:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 39a:	84 8d       	ldd	r24, Z+28	; 0x1c
 39c:	df 01       	movw	r26, r30
 39e:	a8 0f       	add	r26, r24
 3a0:	b1 1d       	adc	r27, r1
 3a2:	a3 5a       	subi	r26, 0xA3	; 163
 3a4:	bf 4f       	sbci	r27, 0xFF	; 255
 3a6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3a8:	84 8d       	ldd	r24, Z+28	; 0x1c
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	8f 73       	andi	r24, 0x3F	; 63
 3b0:	99 27       	eor	r25, r25
 3b2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3b4:	a6 89       	ldd	r26, Z+22	; 0x16
 3b6:	b7 89       	ldd	r27, Z+23	; 0x17
 3b8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 3ba:	a0 89       	ldd	r26, Z+16	; 0x10
 3bc:	b1 89       	ldd	r27, Z+17	; 0x11
 3be:	8c 91       	ld	r24, X
 3c0:	83 70       	andi	r24, 0x03	; 3
 3c2:	80 64       	ori	r24, 0x40	; 64
 3c4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 3c6:	93 8d       	ldd	r25, Z+27	; 0x1b
 3c8:	84 8d       	ldd	r24, Z+28	; 0x1c
 3ca:	98 13       	cpse	r25, r24
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3ce:	02 88       	ldd	r0, Z+18	; 0x12
 3d0:	f3 89       	ldd	r31, Z+19	; 0x13
 3d2:	e0 2d       	mov	r30, r0
 3d4:	80 81       	ld	r24, Z
 3d6:	8f 7d       	andi	r24, 0xDF	; 223
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret

000003dc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
  _written = true;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3f2:	98 13       	cpse	r25, r24
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	e8 89       	ldd	r30, Y+16	; 0x10
 3f8:	f9 89       	ldd	r31, Y+17	; 0x11
 3fa:	80 81       	ld	r24, Z
 3fc:	85 fd       	sbrc	r24, 5
 3fe:	26 c0       	rjmp	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 400:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 402:	0b 8d       	ldd	r16, Y+27	; 0x1b
 404:	10 e0       	ldi	r17, 0x00	; 0
 406:	0f 5f       	subi	r16, 0xFF	; 255
 408:	1f 4f       	sbci	r17, 0xFF	; 255
 40a:	0f 73       	andi	r16, 0x3F	; 63
 40c:	11 27       	eor	r17, r17
 40e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 410:	8c 8d       	ldd	r24, Y+28	; 0x1c
 412:	e8 12       	cpse	r14, r24
 414:	0c c0       	rjmp	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    if (bit_is_clear(SREG, SREG_I)) {
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	07 fc       	sbrc	r0, 7
 41a:	fa cf       	rjmp	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 41c:	e8 89       	ldd	r30, Y+16	; 0x10
 41e:	f9 89       	ldd	r31, Y+17	; 0x11
 420:	80 81       	ld	r24, Z
 422:	85 ff       	sbrs	r24, 5
 424:	f5 cf       	rjmp	.-22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	_tx_udr_empty_irq();
 426:	ce 01       	movw	r24, r28
 428:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 42c:	f1 cf       	rjmp	.-30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 42e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 430:	fe 01       	movw	r30, r28
 432:	e8 0f       	add	r30, r24
 434:	f1 1d       	adc	r31, r1
 436:	e3 5a       	subi	r30, 0xA3	; 163
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 43c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 43e:	f8 94       	cli
    _tx_buffer_head = i;
 440:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 442:	ea 89       	ldd	r30, Y+18	; 0x12
 444:	fb 89       	ldd	r31, Y+19	; 0x13
 446:	80 81       	ld	r24, Z
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	0a c0       	rjmp	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 44c:	9f b7       	in	r25, 0x3f	; 63
 44e:	f8 94       	cli
      *_udr = c;
 450:	ee 89       	ldd	r30, Y+22	; 0x16
 452:	ff 89       	ldd	r31, Y+23	; 0x17
 454:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 456:	e8 89       	ldd	r30, Y+16	; 0x10
 458:	f9 89       	ldd	r31, Y+17	; 0x11
 45a:	80 81       	ld	r24, Z
 45c:	83 70       	andi	r24, 0x03	; 3
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 462:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	08 95       	ret

00000476 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 47c:	88 8d       	ldd	r24, Y+24	; 0x18
 47e:	88 23       	and	r24, r24
 480:	c9 f0       	breq	.+50     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 482:	ea 89       	ldd	r30, Y+18	; 0x12
 484:	fb 89       	ldd	r31, Y+19	; 0x13
 486:	80 81       	ld	r24, Z
 488:	85 fd       	sbrc	r24, 5
 48a:	05 c0       	rjmp	.+10     	; 0x496 <_ZN14HardwareSerial5flushEv+0x20>
 48c:	a8 89       	ldd	r26, Y+16	; 0x10
 48e:	b9 89       	ldd	r27, Y+17	; 0x11
 490:	8c 91       	ld	r24, X
 492:	86 fd       	sbrc	r24, 6
 494:	0f c0       	rjmp	.+30     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	07 fc       	sbrc	r0, 7
 49a:	f5 cf       	rjmp	.-22     	; 0x486 <_ZN14HardwareSerial5flushEv+0x10>
 49c:	80 81       	ld	r24, Z
 49e:	85 ff       	sbrs	r24, 5
 4a0:	f2 cf       	rjmp	.-28     	; 0x486 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4a2:	a8 89       	ldd	r26, Y+16	; 0x10
 4a4:	b9 89       	ldd	r27, Y+17	; 0x11
 4a6:	8c 91       	ld	r24, X
 4a8:	85 ff       	sbrs	r24, 5
 4aa:	ed cf       	rjmp	.-38     	; 0x486 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ac:	ce 01       	movw	r24, r28
 4ae:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4b2:	e7 cf       	rjmp	.-50     	; 0x482 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
 4ca:	6a 01       	movw	r12, r20
 4cc:	7b 01       	movw	r14, r22
 4ce:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4d0:	e8 89       	ldd	r30, Y+16	; 0x10
 4d2:	f9 89       	ldd	r31, Y+17	; 0x11
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4d8:	41 15       	cp	r20, r1
 4da:	51 4e       	sbci	r21, 0xE1	; 225
 4dc:	61 05       	cpc	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	b1 f0       	breq	.+44     	; 0x50e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	79 e0       	ldi	r23, 0x09	; 9
 4e6:	8d e3       	ldi	r24, 0x3D	; 61
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	a7 01       	movw	r20, r14
 4ec:	96 01       	movw	r18, r12
 4ee:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 4f2:	da 01       	movw	r26, r20
 4f4:	c9 01       	movw	r24, r18
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	a1 09       	sbc	r26, r1
 4fa:	b1 09       	sbc	r27, r1
 4fc:	b6 95       	lsr	r27
 4fe:	a7 95       	ror	r26
 500:	97 95       	ror	r25
 502:	87 95       	ror	r24
 504:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 506:	21 15       	cp	r18, r1
 508:	80 e1       	ldi	r24, 0x10	; 16
 50a:	38 07       	cpc	r19, r24
 50c:	a8 f0       	brcs	.+42     	; 0x538 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 50e:	e8 89       	ldd	r30, Y+16	; 0x10
 510:	f9 89       	ldd	r31, Y+17	; 0x11
 512:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 514:	60 e8       	ldi	r22, 0x80	; 128
 516:	74 e8       	ldi	r23, 0x84	; 132
 518:	8e e1       	ldi	r24, 0x1E	; 30
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	a7 01       	movw	r20, r14
 51e:	96 01       	movw	r18, r12
 520:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 524:	da 01       	movw	r26, r20
 526:	c9 01       	movw	r24, r18
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	a1 09       	sbc	r26, r1
 52c:	b1 09       	sbc	r27, r1
 52e:	b6 95       	lsr	r27
 530:	a7 95       	ror	r26
 532:	97 95       	ror	r25
 534:	87 95       	ror	r24
 536:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 538:	ec 85       	ldd	r30, Y+12	; 0x0c
 53a:	fd 85       	ldd	r31, Y+13	; 0x0d
 53c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 53e:	ee 85       	ldd	r30, Y+14	; 0x0e
 540:	ff 85       	ldd	r31, Y+15	; 0x0f
 542:	20 83       	st	Z, r18

  _written = false;
 544:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 546:	ec 89       	ldd	r30, Y+20	; 0x14
 548:	fd 89       	ldd	r31, Y+21	; 0x15
 54a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 54c:	ea 89       	ldd	r30, Y+18	; 0x12
 54e:	fb 89       	ldd	r31, Y+19	; 0x13
 550:	80 81       	ld	r24, Z
 552:	80 61       	ori	r24, 0x10	; 16
 554:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 556:	ea 89       	ldd	r30, Y+18	; 0x12
 558:	fb 89       	ldd	r31, Y+19	; 0x13
 55a:	80 81       	ld	r24, Z
 55c:	88 60       	ori	r24, 0x08	; 8
 55e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 560:	ea 89       	ldd	r30, Y+18	; 0x12
 562:	fb 89       	ldd	r31, Y+19	; 0x13
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 56a:	ea 89       	ldd	r30, Y+18	; 0x12
 56c:	fb 89       	ldd	r31, Y+19	; 0x13
 56e:	80 81       	ld	r24, Z
 570:	8f 7d       	andi	r24, 0xDF	; 223
 572:	80 83       	st	Z, r24
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	df 90       	pop	r13
 580:	cf 90       	pop	r12
 582:	08 95       	ret

00000584 <__vector_20>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 598:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__data_end+0x10>
 59c:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <__data_end+0x11>
 5a0:	80 81       	ld	r24, Z
 5a2:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__data_end+0x16>
 5a6:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <__data_end+0x17>
 5aa:	82 fd       	sbrc	r24, 2
 5ac:	12 c0       	rjmp	.+36     	; 0x5d2 <__vector_20+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5ae:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5b0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__data_end+0x19>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5b8:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__data_end+0x1a>
 5bc:	82 17       	cp	r24, r18
 5be:	51 f0       	breq	.+20     	; 0x5d4 <__vector_20+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5c0:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__data_end+0x19>
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	e2 57       	subi	r30, 0x72	; 114
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5cc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__data_end+0x19>
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__vector_20+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5d2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_21>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 60a:	8e e8       	ldi	r24, 0x8E	; 142
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 634:	8e e8       	ldi	r24, 0x8E	; 142
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN14HardwareSerial9availableEv>
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	89 2b       	or	r24, r25
 640:	09 f4       	brne	.+2      	; 0x644 <_Z17Serial0_availablev+0x10>
 642:	20 e0       	ldi	r18, 0x00	; 0
}
 644:	82 2f       	mov	r24, r18
 646:	08 95       	ret

00000648 <_GLOBAL__sub_I___vector_20>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 648:	ee e8       	ldi	r30, 0x8E	; 142
 64a:	f1 e0       	ldi	r31, 0x01	; 1
 64c:	13 82       	std	Z+3, r1	; 0x03
 64e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 650:	88 ee       	ldi	r24, 0xE8	; 232
 652:	93 e0       	ldi	r25, 0x03	; 3
 654:	a0 e0       	ldi	r26, 0x00	; 0
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	84 83       	std	Z+4, r24	; 0x04
 65a:	95 83       	std	Z+5, r25	; 0x05
 65c:	a6 83       	std	Z+6, r26	; 0x06
 65e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 660:	81 e7       	ldi	r24, 0x71	; 113
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	91 83       	std	Z+1, r25	; 0x01
 666:	80 83       	st	Z, r24
 668:	85 ec       	ldi	r24, 0xC5	; 197
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	95 87       	std	Z+13, r25	; 0x0d
 66e:	84 87       	std	Z+12, r24	; 0x0c
 670:	84 ec       	ldi	r24, 0xC4	; 196
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	97 87       	std	Z+15, r25	; 0x0f
 676:	86 87       	std	Z+14, r24	; 0x0e
 678:	80 ec       	ldi	r24, 0xC0	; 192
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	91 8b       	std	Z+17, r25	; 0x11
 67e:	80 8b       	std	Z+16, r24	; 0x10
 680:	81 ec       	ldi	r24, 0xC1	; 193
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	93 8b       	std	Z+19, r25	; 0x13
 686:	82 8b       	std	Z+18, r24	; 0x12
 688:	82 ec       	ldi	r24, 0xC2	; 194
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	95 8b       	std	Z+21, r25	; 0x15
 68e:	84 8b       	std	Z+20, r24	; 0x14
 690:	86 ec       	ldi	r24, 0xC6	; 198
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	97 8b       	std	Z+23, r25	; 0x17
 696:	86 8b       	std	Z+22, r24	; 0x16
 698:	11 8e       	std	Z+25, r1	; 0x19
 69a:	12 8e       	std	Z+26, r1	; 0x1a
 69c:	13 8e       	std	Z+27, r1	; 0x1b
 69e:	14 8e       	std	Z+28, r1	; 0x1c
 6a0:	08 95       	ret

000006a2 <initVariant>:
 6a2:	08 95       	ret

000006a4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6a4:	0e 94 65 04 	call	0x8ca	; 0x8ca <init>

	initVariant();
 6a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6ac:	0e 94 e5 00 	call	0x1ca	; 0x1ca <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6b0:	cd ea       	ldi	r28, 0xAD	; 173
 6b2:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6b4:	0e 94 00 01 	call	0x200	; 0x200 <loop>
		if (serialEventRun) serialEventRun();
 6b8:	20 97       	sbiw	r28, 0x00	; 0
 6ba:	e1 f3       	breq	.-8      	; 0x6b4 <main+0x10>
 6bc:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z14serialEventRunv>
 6c0:	f9 cf       	rjmp	.-14     	; 0x6b4 <main+0x10>

000006c2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
 6c2:	cf 92       	push	r12
 6c4:	df 92       	push	r13
 6c6:	ef 92       	push	r14
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	6c 01       	movw	r12, r24
 6d4:	7a 01       	movw	r14, r20
 6d6:	8b 01       	movw	r16, r22
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
 6da:	d0 e0       	ldi	r29, 0x00	; 0
 6dc:	ce 15       	cp	r28, r14
 6de:	df 05       	cpc	r29, r15
 6e0:	81 f0       	breq	.+32     	; 0x702 <_ZN5Print5writeEPKhj+0x40>
 6e2:	d8 01       	movw	r26, r16
 6e4:	6d 91       	ld	r22, X+
 6e6:	8d 01       	movw	r16, r26
 6e8:	d6 01       	movw	r26, r12
 6ea:	ed 91       	ld	r30, X+
 6ec:	fc 91       	ld	r31, X
 6ee:	01 90       	ld	r0, Z+
 6f0:	f0 81       	ld	r31, Z
 6f2:	e0 2d       	mov	r30, r0
 6f4:	c6 01       	movw	r24, r12
 6f6:	09 95       	icall
 6f8:	89 2b       	or	r24, r25
 6fa:	11 f0       	breq	.+4      	; 0x700 <_ZN5Print5writeEPKhj+0x3e>
 6fc:	21 96       	adiw	r28, 0x01	; 1
 6fe:	ee cf       	rjmp	.-36     	; 0x6dc <_ZN5Print5writeEPKhj+0x1a>
 700:	7e 01       	movw	r14, r28
 702:	c7 01       	movw	r24, r14
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	df 90       	pop	r13
 712:	cf 90       	pop	r12
 714:	08 95       	ret

00000716 <_ZN5Print5writeEPKc>:
 716:	61 15       	cp	r22, r1
 718:	71 05       	cpc	r23, r1
 71a:	79 f0       	breq	.+30     	; 0x73a <_ZN5Print5writeEPKc+0x24>
 71c:	fb 01       	movw	r30, r22
 71e:	01 90       	ld	r0, Z+
 720:	00 20       	and	r0, r0
 722:	e9 f7       	brne	.-6      	; 0x71e <_ZN5Print5writeEPKc+0x8>
 724:	31 97       	sbiw	r30, 0x01	; 1
 726:	af 01       	movw	r20, r30
 728:	46 1b       	sub	r20, r22
 72a:	57 0b       	sbc	r21, r23
 72c:	dc 01       	movw	r26, r24
 72e:	ed 91       	ld	r30, X+
 730:	fc 91       	ld	r31, X
 732:	02 80       	ldd	r0, Z+2	; 0x02
 734:	f3 81       	ldd	r31, Z+3	; 0x03
 736:	e0 2d       	mov	r30, r0
 738:	09 94       	ijmp
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	08 95       	ret

00000740 <_ZN5Print5printEPKc>:
 740:	0c 94 8b 03 	jmp	0x716	; 0x716 <_ZN5Print5writeEPKc>

00000744 <_ZN5Print7printlnEv>:
 744:	6f e7       	ldi	r22, 0x7F	; 127
 746:	71 e0       	ldi	r23, 0x01	; 1
 748:	0c 94 8b 03 	jmp	0x716	; 0x716 <_ZN5Print5writeEPKc>

0000074c <_ZN5Print7printlnEPKc>:
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
 756:	0e 94 8b 03 	call	0x716	; 0x716 <_ZN5Print5writeEPKc>
 75a:	8c 01       	movw	r16, r24
 75c:	ce 01       	movw	r24, r28
 75e:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN5Print7printlnEv>
 762:	80 0f       	add	r24, r16
 764:	91 1f       	adc	r25, r17
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	08 95       	ret

00000770 <_ZN5Print11printNumberEmh>:
 770:	8f 92       	push	r8
 772:	9f 92       	push	r9
 774:	af 92       	push	r10
 776:	bf 92       	push	r11
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	a1 97       	sbiw	r28, 0x21	; 33
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	7c 01       	movw	r14, r24
 796:	fa 01       	movw	r30, r20
 798:	cb 01       	movw	r24, r22
 79a:	19 a2       	std	Y+33, r1	; 0x21
 79c:	22 30       	cpi	r18, 0x02	; 2
 79e:	08 f4       	brcc	.+2      	; 0x7a2 <_ZN5Print11printNumberEmh+0x32>
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	8e 01       	movw	r16, r28
 7a4:	0f 5d       	subi	r16, 0xDF	; 223
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	82 2e       	mov	r8, r18
 7aa:	91 2c       	mov	r9, r1
 7ac:	a1 2c       	mov	r10, r1
 7ae:	b1 2c       	mov	r11, r1
 7b0:	bf 01       	movw	r22, r30
 7b2:	a5 01       	movw	r20, r10
 7b4:	94 01       	movw	r18, r8
 7b6:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 7ba:	f9 01       	movw	r30, r18
 7bc:	ca 01       	movw	r24, r20
 7be:	01 50       	subi	r16, 0x01	; 1
 7c0:	11 09       	sbc	r17, r1
 7c2:	6a 30       	cpi	r22, 0x0A	; 10
 7c4:	10 f4       	brcc	.+4      	; 0x7ca <_ZN5Print11printNumberEmh+0x5a>
 7c6:	60 5d       	subi	r22, 0xD0	; 208
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <_ZN5Print11printNumberEmh+0x5c>
 7ca:	69 5c       	subi	r22, 0xC9	; 201
 7cc:	d8 01       	movw	r26, r16
 7ce:	6c 93       	st	X, r22
 7d0:	23 2b       	or	r18, r19
 7d2:	24 2b       	or	r18, r20
 7d4:	25 2b       	or	r18, r21
 7d6:	61 f7       	brne	.-40     	; 0x7b0 <_ZN5Print11printNumberEmh+0x40>
 7d8:	b8 01       	movw	r22, r16
 7da:	c7 01       	movw	r24, r14
 7dc:	0e 94 8b 03 	call	0x716	; 0x716 <_ZN5Print5writeEPKc>
 7e0:	a1 96       	adiw	r28, 0x21	; 33
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	bf 90       	pop	r11
 7fa:	af 90       	pop	r10
 7fc:	9f 90       	pop	r9
 7fe:	8f 90       	pop	r8
 800:	08 95       	ret

00000802 <_ZN5Print5printEmi>:
 802:	21 15       	cp	r18, r1
 804:	31 05       	cpc	r19, r1
 806:	41 f4       	brne	.+16     	; 0x818 <_ZN5Print5printEmi+0x16>
 808:	dc 01       	movw	r26, r24
 80a:	ed 91       	ld	r30, X+
 80c:	fc 91       	ld	r31, X
 80e:	01 90       	ld	r0, Z+
 810:	f0 81       	ld	r31, Z
 812:	e0 2d       	mov	r30, r0
 814:	64 2f       	mov	r22, r20
 816:	09 94       	ijmp
 818:	0c 94 b8 03 	jmp	0x770	; 0x770 <_ZN5Print11printNumberEmh>

0000081c <_ZN5Print5printEhi>:
 81c:	9a 01       	movw	r18, r20
 81e:	46 2f       	mov	r20, r22
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	0c 94 01 04 	jmp	0x802	; 0x802 <_ZN5Print5printEmi>

0000082a <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
 82a:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
 82c:	ab 01       	movw	r20, r22
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	0c 94 01 04 	jmp	0x802	; 0x802 <_ZN5Print5printEmi>

00000836 <__vector_18>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
 83e:	11 24       	eor	r1, r1
 840:	2f 93       	push	r18
 842:	3f 93       	push	r19
 844:	8f 93       	push	r24
 846:	9f 93       	push	r25
 848:	af 93       	push	r26
 84a:	bf 93       	push	r27
 84c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <timer0_millis>
 850:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timer0_millis+0x1>
 854:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <timer0_millis+0x2>
 858:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <timer0_millis+0x3>
 85c:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <timer0_fract>
 860:	23 e0       	ldi	r18, 0x03	; 3
 862:	23 0f       	add	r18, r19
 864:	2d 37       	cpi	r18, 0x7D	; 125
 866:	20 f4       	brcc	.+8      	; 0x870 <__vector_18+0x3a>
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	a1 1d       	adc	r26, r1
 86c:	b1 1d       	adc	r27, r1
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__vector_18+0x44>
 870:	26 e8       	ldi	r18, 0x86	; 134
 872:	23 0f       	add	r18, r19
 874:	02 96       	adiw	r24, 0x02	; 2
 876:	a1 1d       	adc	r26, r1
 878:	b1 1d       	adc	r27, r1
 87a:	20 93 2b 02 	sts	0x022B, r18	; 0x80022b <timer0_fract>
 87e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <timer0_millis>
 882:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <timer0_millis+0x1>
 886:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <timer0_millis+0x2>
 88a:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <timer0_millis+0x3>
 88e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <timer0_overflow_count>
 892:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <timer0_overflow_count+0x1>
 896:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <timer0_overflow_count+0x2>
 89a:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <timer0_overflow_count+0x3>
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	a1 1d       	adc	r26, r1
 8a2:	b1 1d       	adc	r27, r1
 8a4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <timer0_overflow_count>
 8a8:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <timer0_overflow_count+0x1>
 8ac:	a0 93 32 02 	sts	0x0232, r26	; 0x800232 <timer0_overflow_count+0x2>
 8b0:	b0 93 33 02 	sts	0x0233, r27	; 0x800233 <timer0_overflow_count+0x3>
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	3f 91       	pop	r19
 8be:	2f 91       	pop	r18
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

000008ca <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8ca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8cc:	84 b5       	in	r24, 0x24	; 36
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8d2:	84 b5       	in	r24, 0x24	; 36
 8d4:	81 60       	ori	r24, 0x01	; 1
 8d6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8d8:	85 b5       	in	r24, 0x25	; 37
 8da:	82 60       	ori	r24, 0x02	; 2
 8dc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8de:	85 b5       	in	r24, 0x25	; 37
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8e4:	ee e6       	ldi	r30, 0x6E	; 110
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8ee:	e1 e8       	ldi	r30, 0x81	; 129
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8f4:	80 81       	ld	r24, Z
 8f6:	82 60       	ori	r24, 0x02	; 2
 8f8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8fa:	80 81       	ld	r24, Z
 8fc:	81 60       	ori	r24, 0x01	; 1
 8fe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 900:	e0 e8       	ldi	r30, 0x80	; 128
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	81 60       	ori	r24, 0x01	; 1
 908:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 90a:	e1 eb       	ldi	r30, 0xB1	; 177
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	84 60       	ori	r24, 0x04	; 4
 912:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 914:	e0 eb       	ldi	r30, 0xB0	; 176
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 91e:	ea e7       	ldi	r30, 0x7A	; 122
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	84 60       	ori	r24, 0x04	; 4
 926:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 928:	80 81       	ld	r24, Z
 92a:	82 60       	ori	r24, 0x02	; 2
 92c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 92e:	80 81       	ld	r24, Z
 930:	81 60       	ori	r24, 0x01	; 1
 932:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 934:	80 81       	ld	r24, Z
 936:	80 68       	ori	r24, 0x80	; 128
 938:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 93a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 93e:	08 95       	ret

00000940 <__udivmodsi4>:
 940:	a1 e2       	ldi	r26, 0x21	; 33
 942:	1a 2e       	mov	r1, r26
 944:	aa 1b       	sub	r26, r26
 946:	bb 1b       	sub	r27, r27
 948:	fd 01       	movw	r30, r26
 94a:	0d c0       	rjmp	.+26     	; 0x966 <__udivmodsi4_ep>

0000094c <__udivmodsi4_loop>:
 94c:	aa 1f       	adc	r26, r26
 94e:	bb 1f       	adc	r27, r27
 950:	ee 1f       	adc	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	a2 17       	cp	r26, r18
 956:	b3 07       	cpc	r27, r19
 958:	e4 07       	cpc	r30, r20
 95a:	f5 07       	cpc	r31, r21
 95c:	20 f0       	brcs	.+8      	; 0x966 <__udivmodsi4_ep>
 95e:	a2 1b       	sub	r26, r18
 960:	b3 0b       	sbc	r27, r19
 962:	e4 0b       	sbc	r30, r20
 964:	f5 0b       	sbc	r31, r21

00000966 <__udivmodsi4_ep>:
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a 94       	dec	r1
 970:	69 f7       	brne	.-38     	; 0x94c <__udivmodsi4_loop>
 972:	60 95       	com	r22
 974:	70 95       	com	r23
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	bd 01       	movw	r22, r26
 980:	cf 01       	movw	r24, r30
 982:	08 95       	ret

00000984 <__tablejump2__>:
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	05 90       	lpm	r0, Z+
 98a:	f4 91       	lpm	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	09 94       	ijmp

00000990 <_exit>:
 990:	f8 94       	cli

00000992 <__stop_program>:
 992:	ff cf       	rjmp	.-2      	; 0x992 <__stop_program>
